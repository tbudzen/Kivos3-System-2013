unit uReportShiftBalancePreview;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uReportPreview, frxClass, frxDBSet,
  frxGradient, frxExportPDF, Vcl.ImgList, Vcl.ExtCtrls, Vcl.Buttons, frxPreview,
  Vcl.ComCtrls;

type
  TReportShiftBalancePreview = class(TReportPreview)
    q_sum: TfrxDBDataset;
    q_detail: TfrxDBDataset;
    q_header: TfrxDBDataset;
    Report: TfrxReport;
  private

  public
    destructor Destroy; override;
  protected
    function LoadFiles: boolean; override;
    function LoadData: boolean; override;
    procedure LoadParametres; override;
    procedure ShowReport; override;
    function GetReportName: string; override;
  end;

  TReportShiftBalanceQuiet = class(TReportQuiet)
  private
  public
    ReportTicket: TReportShiftBalancePreview;
    constructor createNew;
    destructor Destroy; override;
    procedure Print; override;
    procedure GetReport; override;
  end;

var
  ReportShiftBalancePreview: TReportShiftBalancePreview;

implementation

uses uDataBase, uGlobals, DateUtils, uSystem;
{$R *.dfm}
// ##############################################################################
{ TReportShiftPreview }
// ##############################################################################

destructor TReportShiftBalancePreview.Destroy;
var
  xExec: TResultHandle;
  xQuery: string;
begin
  xExec := TResultHandle.Create;
  xQuery := 'Delete from tbl_session where guid=''%s'''; //and Name =''%s''';
  xQuery := format(xQuery, [SessionGuid]);
  xExec.ClearResult;
  xExec.Add(xQuery);
  xExec.ExecuteSQL;
  xExec.ClearResult;
  xExec.Free;
  inherited;
end;

// ##############################################################################

function TReportShiftBalancePreview.GetReportName: string;
begin
  result := 'Shift';
end;

// ##############################################################################


function TReportShiftBalancePreview.LoadData: boolean;
var
  xQuery: string;
  xShift: TResultHandle;
  xValues: TResultHandle;
  xBalance: TResultHandle;
begin
  xQuery:=  'select cctt.name, coalesce(u.first_name||'' '','')||coalesce(u.last_name,'')casier,'+
       'tc.cd_name, current_date, cct.ct_number,cct.gaming_date,cct.user_explanation,cct.datetime '+

        'from tbl_cd_cash_transactions cct '+
        'left join tbl_cd_cash_transactions_types cctt on cctt.type=cct.type '+
        'left join tbl_users u on u.id=cct.id_user '+
        'left join tbl_cd tc on tc.id=cct.id_cashdesk'+
        ' where cct.ct_number=''%s''' ;

  xQuery := format(xQuery, [Fct_number]);
  xShift := TResultHandle.Create;
  xShift.ClearResult;
  xShift.Add(xQuery);
  xShift.InvokeSQL;
  q_header.DataSet:= xShift.query;

  xQuery :='select cctv.multiplier,cctv.exchange_rate,cctv.category_name,tv.name value_name,'+
       'cctv.currency_symbol,ct.user_explanation, ct.dateTime,  '+
     '  case '+
        ' when cctv.direction=1 then cctv.nr '+
        ' when cctv.direction=2 then cctv.nr * -1 ' +
     '  else 0  '+
      ' end nr '+
   ' from tbl_cd_cash_transactions  ct  '+
   ' left join tbl_cd_cash_transactions_subt_categories_values cctv on cctv.ct_number=ct.ct_number '+
   ' left join tbl_values tv on tv.id=cctv.id_cd_value'+
   ' where ct.ct_number = ''%s'' and cctv.nr <> 0'+
   ' order by tv.sort_order, tv.name ' ;

  xQuery := format(xQuery, [Fct_number]);

  xValues := TResultHandle.Create;
  xValues.ClearResult;
  xValues.Add(xQuery);
  xValues.InvokeSQL;
  q_detail.DataSet := xValues.query;
  {
  xQuery := 'select t1.category_name, t2.currency_symbol, t1.amount_0 as actual_amount_fc, '+
    '  t1.amount_1 as actual_amount, t2.amount_0 as amount_expected_fc,'  +
    '  t2.amount_1 as amount_expected, t1.amount_1 - t2.amount_1 as difference ' +
'from'+
 '  (   select category_name(c.id_cd_category) as category_name,'+
 '     curr.symbol as currency_symbol, ' +
 '     sum(c.nr * v.multiplier) as amount_0, '+
 '     sum(c.nr * v.multiplier * c.exchange_rate) as amount_1 '+
 '   from   tbl_cd_cash_transactions_subt_categories_values as c, ' +
 '     tbl_values as v,'+
 '     tbl_categories as cat,' +
 '     tbl_currencies_exchange_rates as cer,'+
 '     tbl_currencies as curr ' +
 '   where  ct_number = ''%s'' and  '+
 '     c.id_cd_category = cat.id and     c.id_cd_value = v.id and  '+
 '     c.id_cashdesk =   %s      and '+
 '     cer.valid_from <= now() and cer.valid_to >= now() and  '+
 '     cer.id_currency = curr.id and     v.id_currency = curr.id ' +
 '   group by c.id_cd_category, curr.symbol '+
 '   ) as t1,'+
 '   (    select     s.cat_name as category_name, '+
 '     s.currency_symbol as currency_symbol,  '+
 '   sum(s.amount0) as amount_0,sum(s.amount1) as amount_1 ' +
 '   from '+
 '     (      select ' +
 '         v.category_name as cat_name, '+
 '         v.currency_symbol as currency_symbol,' +
 '         sum(v.nr * v.multiplier  '+
 '         * (case when v.direction = 1 then 1 else -1 end)) as amount0,'+
 '         sum(v.nr * v.multiplier * v.exchange_rate '+
 '         * (case when v.direction = 1 then 1 else -1 end)) as amount1 ' +
 '       from tbl_cd_cash_transactions_subt_categories_values as v  '+
 '       where v.ct_number <> ''%s'' and ' +
        ' (select max(datetime) from tbl_cd_cash_transactions where datetime'+
        ' <= v.datetime and tbl_cd_cash_transactions.type in(3,5,6)) <= v.dateTime  '+
 '          and    v.id_cashdesk = %s      and' +
 '         v.category_name is not null and  '+
 '         substring(v.ct_number, 1, 2) <> ''CH'' and  substring(v.ct_number, 1, 3) <> ''INF'' '+
 '       group by cat_name, currency_symbol'+
 '      ) as s  ' +
 '    group by s.cat_name, s.currency_symbol '  +
 '    ) as t2 ' +
 '    where  t1.category_name = t2.category_name and '+
 '     t1.currency_symbol = t2.currency_symbol'   ;

  }
  xQuery:=' Select category_name, currency_symbol, actual_amount_fc, actual_amount,'+
          ' amount_expected_fc, amount_expected, difference, datetime '+
          ' from tbl_cd_cash_transactions_shift_values  where ct_number=''%s'''+
          ' order by id ';


  xQuery := format(xQuery, [Fct_number]);

  xBalance := TResultHandle.Create;
  xBalance.ClearResult;
  xBalance.Add(xQuery);
  xBalance.InvokeSQL;
  q_sum.DataSet := xBalance.query;

  inherited;

end;
// ##############################################################################

function TReportShiftBalancePreview.LoadFiles: boolean;
var
  xString: TStringStream;
begin
  Report.LoadFromFile(ExtractFilePath(Application.ExeName) + 'Shifts.fr3');
end;

// ##############################################################################

procedure TReportShiftBalancePreview.LoadParametres;
begin
  inherited;
end;

// ##############################################################################
procedure TReportShiftBalancePreview.ShowReport;
begin
  inherited;
  Report.ShowReport();
end;

// ##############################################################################

{ TReportShiftQuiet }

constructor TReportShiftBalanceQuiet.createNew;
begin

end;

// ##############################################################################

destructor TReportShiftBalanceQuiet.Destroy;
begin
  inherited;
end;

// ##############################################################################

procedure TReportShiftBalanceQuiet.GetReport;
begin

  inherited;
  ReportTicket := TReportShiftBalancePreview.Create(nil);
  ReportTicket.Visible := false;
  ReportTicket.LoadFiles;
  ReportTicket.LoadParametres;
  ReportTicket.LoadData;
  self.Report := ReportTicket.Report;
end;

// ##############################################################################

procedure TReportShiftBalanceQuiet.Print;

var
  xName: string;
begin
  xName := ReportTicket.GetPrinterName;
  if xName <> EmptyStr then
  begin
    ReportTicket.Report.PrintOptions.Printer := xName;
  end;
  ReportTicket.Report.PrepareReport();
  ReportTicket.Report.PrintOptions.ShowDialog := false;
  ReportTicket.Report.Print;
  inherited;
end;

// ##############################################################################

end.
